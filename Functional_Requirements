- STDR must support multi-robot functionality
- The system must contain a Server [S], a GUI [G] and Robot nodes [R]
- [S] must be initialized before [G] and [R]
- [G] does not need to run for [S] and [R] to work
- [G] must open and close without any changes in [S] and [R] functionalities
- [G] must get information about topics and number of [R]s from [S]
- [R] must have sensors
- [R] must provide laser functionalities
- [R] must provide sonar functionalities
- [R] must provide odometry functionalities
- [R] must take speeds as input
- [R] provides tf
- [R] provides RFID reader
- [R] (or [S]?) provides static OGM
- Sensors must have noise
- [R] takes the map and robot initial pose at begin from [S]
- Sensors are compiled into libraries
- SDF/XML/yaml files for parameters
- [S],[R],[G] must be implemented with pluginlib
- [R] will have the form of node & nodelet
- [R] will handle the sensors (distributed functionality)
- STDR must support command line only functionality 
- Navigation/Path planner stacks will be additionally provided in seperate repos
- [S] must spawn robots
- [S] must kill robots
- [S] must change the place of robots
- [S][G] must create/remove RFID tags from space
- [G] must spawn,kill,change place of robots through [S]
- [G] subscribes to [R] topics and shows information
- [G] could be created as plugin in rqt
- [R] checks for collision
- [R] spanws and closes without changing functionality of [S]
- [R] can be spawned with different robot/sensors models
- [R] must be seperate processes 
- [G] provides click (right/left) functionalities in the map with options
- [G] provides zoom in/out with mouse
- [G] should provide simulation acceleration/deceleration
- [G] can have implementations in QT or Python
- Maps can be .png/.jpg/.bmp grayscale files
- [R] provides ROS std messages
